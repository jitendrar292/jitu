

@Configuration
@EnableAspectJAutoProxy
@Aspect
public class LoggingAspectConfig {

  @Pointcut("execution(*client.*.*.*(..))")
  public void monitor() {
    // This works as a JoinPoint for pointcut in apiMonitorAdvisor
  }

  @Bean
  public APIMonitoringInterceptor apiMonitorInterceptor() {
    return new APIMonitoringInterceptor(true);
  }

  @Bean
  public Advisor apiMonitorAdvisor() {
    AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
    pointcut.setExpression("LoggingAspectConfig.monitor()");
    return new DefaultPointcutAdvisor(pointcut, apiMonitorInterceptor());
  }
}
 

 

 

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//


import java.util.Date;
import org.aopalliance.intercept.MethodInvocation;
import org.apache.commons.logging.Log;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.aop.interceptor.AbstractMonitoringInterceptor;

public class APIMonitoringInterceptor extends AbstractMonitoringInterceptor {
  private static final Logger log = LoggerFactory.getLogger(APIMonitoringInterceptor.class);

  public APIMonitoringInterceptor() {
  }

  public APIMonitoringInterceptor(boolean useDynamicLogger) {
    this.setUseDynamicLogger(useDynamicLogger);
  }

  public Object invoke(MethodInvocation invocation) throws Throwable {
    String name = this.createInvocationTraceName(invocation);
    long start = System.currentTimeMillis();
    log.info("Method " + name + " execution started at:" + new Date());
    boolean var16 = false;

    Object var5;
    try {
      var16 = true;
      var5 = invocation.proceed();
      var16 = false;
    } finally {
      if (var16) {
        long var11 = System.currentTimeMillis();
        long time = var11 - start;
        log.info("Method " + name + " execution lasted:" + time + " ms");
        log.info("Method " + name + " execution ended at:" + new Date());
      }
    }

    long end = System.currentTimeMillis();
    long time = end - start;
    log.info("Method " + name + " execution lasted:" + time + " ms");
    log.info("Method " + name + " execution ended at:" + new Date());
    return var5;
  }

  protected Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable {
    return invocation.proceed();
  }
}
